{"version":3,"sources":["shared/images/logo.svg","components/pomodore/Timer.js","shared/components/layout/Header.js","shared/components/layout/Content.js","shared/components/layout/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDefaulTime","setState","time","times","defaultTime","setTime","newTime","restartInterval","clearInterval","interval","setInterval","countDown","state","alert","type","message","setTimeForWork","setTimeForShortBreak","shortBreak","setTimeForLongBreak","longBreak","setPause","setPlay","setStop","seconds","m","Math","floor","s","concat","_this$state","_this$state$alert","react_default","a","createElement","className","displayTimer","onClick","fa","Component","Header","props","_props$title","title","_props$url","url","href","src","logo","alt","prototype","PropTypes","string","isRequired","Content","children","element","Footer","Date","getFullYear","App","layout_Header","layout_Content","components_pomodore_Timer","layout_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c635213.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { FaPlay, FaPause, FaStop } from 'react-icons/fa';\n//Style\nimport './Timer.css'\nclass Timer extends Component {\n    constructor() {\n        super();\n        //Initial State\n        this.state = {\n            alert: {\n                type: '',\n                message: ''\n            },\n            time: 0\n        };\n        //defined times for works, short break and long\n        this.times = {\n            defaultTime: 1500, //25min\n            shortBreak: 300, //5min\n            longBreak: 900 //15min\n        }\n    }\n    componentDidMount() {\n        //set default time when the component mounts\n        this.setDefaulTime();\n    }\n    setDefaulTime = () => {\n        //default time is 25min\n        this.setState({\n            time: this.times.defaultTime\n        });\n    }\n\n\n    setTime = newTime => {\n        this.restartInterval();\n\n        this.setState({\n            time: newTime\n        })\n    }\n\n\n    restartInterval = () => {\n        //clearing the interval\n        clearInterval(this.interval);\n\n        //execute counDown function every second\n        this.interval = setInterval(this.countDown, 1000);\n    }\n\n    countDown = () => {\n        //if the time reach 0 then we display Buzzzz\n        if (this.state.time === 0) {\n            this.setState({\n                alert: {\n                    type: 'buz',\n                    message: 'Buzzzzzz !'\n                }\n            })\n        } else {\n            //We decresse the time second by second\n            this.setState({\n                time: this.state.time - 1\n            })\n        }\n    }\n\n    setTimeForWork = () => {\n        this.setState({\n            alert: {\n                type: 'work',\n                message: 'Working !'\n            }\n        })\n        return this.setTime(this.times.defaultTime);\n    }\n\n    setTimeForShortBreak = () => {\n        this.setState({\n            alert: {\n                type: 'shortBreak',\n                message: 'taking a Short Break'\n            }\n        })\n        return this.setTime(this.times.shortBreak);\n    }\n\n    setTimeForLongBreak = () => {\n        this.setState({\n            alert: {\n                type: 'longBreak',\n                message: 'Taking a Lon Break'\n            }\n        })\n        return this.setTime(this.times.longBreak);\n    }\n\n\n    displayTimer(seconds) {\n        //Formarting te time into mm:ss\n        const m = Math.floor(seconds % 3600 / 60);\n        const s = Math.floor(seconds % 3600 % 60);\n        return `${m < 10 ? '0' : ''}${m}: ${s < 10 ? '0' : ''}${s}`;\n    }\n\n    setPause = () => {\n\n        clearInterval(this.interval);\n\n    }\n\n    setPlay = () => {\n\n        this.interval = setInterval(this.countDown, 1000);\n    }\n\n    setStop = () => {\n        this.setState({\n            time: 0\n        })\n    }\n\n    render() {\n        const { alert: { message, type }, time } = this.state;\n        return (\n            <div className=\"Pomodoro\">\n                <div className={`alert ${type}`}>\n                    {message}\n                </div>\n                <div className=\"timer\">\n                    {this.displayTimer(time)}\n                </div>\n\n                <div className=\"type\">\n                    <button\n                        className=\"start\"\n                        onClick={this.setTimeForWork}\n                    >\n                        Star Working\n                    </button>\n                    <button\n                        className=\"short\"\n                        onClick={this.setTimeForShortBreak}\n                    >\n                        Short Break\n                    </button><button\n                        className=\"long\"\n                        onClick={this.setTimeForLongBreak}\n                    >\n                        Long Break\n                    </button>\n                </div>\n                <div className=\"type\">\n                    <button\n                        className=\"pause\"\n                        onClick={this.setPause}\n                    >\n                        <FaPause />\n                    </button>\n                    <button\n                        className=\"\"\n                        onClick={this.setPlay}\n                    >\n                        <FaPlay />\n                    </button><button\n                        className=\"stop\"\n                        onClick={this.setStop}\n                    >\n                        <FaStop />\n                    </button>\n\n                </div>\n\n            </div>\n        )\n    }\n}\nexport default Timer;\n","import React from 'react';\n//Composents\nimport logo from '../../images/logo.svg'\n//PropTypes\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n    const {\n        title = 'Welcome to React',\n        url = 'http://localhost:3000'\n    } = props;\n\n    return (\n        <header className=\"App-header\">\n            <a href={url}>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </a>\n            <h1 className=\"App-title\">{title}</h1>\n        </header>\n\n    );\n};\n\nHeader.prototype = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string\n}\n// class Header extends Component {\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         url: PropTypes.string\n//     }\n//     render() {\n//         const {\n//             title = 'Welcome to React',\n//             url = 'http://localhost:3000'\n//         } = this.props\n//         return (\n//             <header className=\"App-header\">\n//                 <a href={url}>\n//                     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//                 </a>\n//                 <h1 className=\"App-title\">{title}</h1>\n\n//             </header>\n//         )\n//     }\n// }\n\nexport default Header;\n","import React from 'react'\n//Prop-Type\nimport PropTypes from 'prop-types';\n\nconst Content = props => {\n    const { children } = props;\n    return (\n        <main>\n            {children}\n        </main>\n    );\n}\n\n\nContent.prototype = {\n    children: PropTypes.element.isRequired\n}\nexport default Content;","import React from 'react'\n\nconst Footer = () => (\n    <footer>&copy; Davi {(new Date()).getFullYear()}</footer>\n);\n\n\n\n// class Footer extends Component {\n//     render() {\n//         return (\n//             <footer>&copy; Codejobs {(new Date()).getFullYear()}</footer>\n//         );\n//     }\n// }\nexport default Footer;","import React, { Component } from 'react';\n//Components\nimport Timer from './pomodore/Timer'\n//LAYOUT components\nimport Header from '../shared/components/layout/Header';\nimport Content from '../shared/components/layout/Content';\nimport Footer from '../shared/components/layout/Footer';\n\n\n\n//style\nimport './App.css';\n\n\n\n//import logo from '../shared/images/logo.svg';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title=\"Welcome To Davi's App\" />\n        <Content>\n\n          <Timer />\n        </Content>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}